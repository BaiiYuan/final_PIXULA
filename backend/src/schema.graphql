type Query {
  users(id: ID, account: String, password: String): [User!]!
  projects(author: ID!): [Project!]!
  project(id: ID!): Project!
  project_id(author: ID!, title: String!): Project!
  projects_public: [Project!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, password: String!): User!
  createProject(data: CreateProjectInput!): Project!
  copyProject(data: copyProjectInput!): Project!
  deleteProject(id: ID!): Project!
  updateProject(id: ID!, data: UpdateProjectInput!): Project!
}

type Subscription {
  project(author: ID!): ProjectSubscriptionPayload!
}

input CreateUserInput {
  account: String!
  password: String!
}

input CreateProjectInput {
  author: ID!
  account: String!
  title: String!
  description: String!
  imageOriginal: String!
  imageTransfer: String!
  imageFinal: String!
  date: String!
}

input copyProjectInput {
  author: ID!
  account: String!
  title: String!
  description: String!
  imageOriginal: String!
  imageTransfer: String!
  imageFinal: String!
  blur: String!
  brightness: String!
  contrast: String!
  grayscale: String!
  hue_rotate: String!
  invert: String!
  opacity: String!
  saturate: String!
  sepia: String!
  date: String!
}

input UpdateProjectInput {
  title: String!
  description: String!
  imageTransfer: String!
  imageFinal: String!
  blur: String!
  brightness: String!
  contrast: String!
  grayscale: String!
  hue_rotate: String!
  invert: String!
  opacity: String!
  saturate: String!
  sepia: String!
  public: Boolean!
  date: String!
}

type User {
  id: ID!
  account: String!
  password: String!
  projects: [Project!]
}

type Project {
  id: ID!
  author: User!
  account: String!
  title: String!
  description: String!
  imageOriginal: String!
  imageTransfer: String!
  imageFinal: String!
  blur: String!
  brightness: String!
  contrast: String!
  grayscale: String!
  hue_rotate: String!
  invert: String!
  opacity: String!
  saturate: String!
  sepia: String!
  public: Boolean!
  date: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  data: Project!
}
