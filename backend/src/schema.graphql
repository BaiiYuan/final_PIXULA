type Query {
  users(id: ID, account: String, password: String): [User!]!
  projects(author: ID!): [Project!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, password: String!): User!
  createProject(data: CreateProjectInput!): Project!
  deleteProject(id: ID!): Project!
  updateProject(id: ID!, data: UpdateProjectInput!): Project!
}

type Subscription {
  project(author: ID!): ProjectSubscriptionPayload!
}

input CreateUserInput {
  account: String!
  password: String!
}

input CreateProjectInput {
  author: ID!
  title: String!
  description: String!
  image_id: String!
  blur: Float!
  brightness: Float!
  contrast: Float!
  grayscale: Float!
  hue_rotate: Float!
  invert: Float!
  opacity: Float!
  saturate: Float!
  sepia: Float!
}

input UpdateProjectInput {
  id: ID!
  title: String
  description: String
}

type User {
  id: ID!
  account: String!
  password: String!
  projects: [Project!]!
}

type Project {
  id: ID!
  author: User!
  title: String!
  description: String!
  image_id: String!
  blur: Float!
  brightness: Float!
  contrast: Float!
  grayscale: Float!
  hue_rotate: Float!
  invert: Float!
  opacity: Float!
  saturate: Float!
  sepia: Float!


}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  data: Project!
}
